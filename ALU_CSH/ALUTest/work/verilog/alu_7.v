/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_7 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] alu,
    output reg [0:0] z,
    output reg [0:0] v,
    output reg [0:0] n
  );
  
  
  
  wire [16-1:0] M_adder_op;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [6-1:0] M_adder_alufn;
  reg [16-1:0] M_adder_a;
  reg [16-1:0] M_adder_b;
  adder_10 adder (
    .alufn(M_adder_alufn),
    .a(M_adder_a),
    .b(M_adder_b),
    .op(M_adder_op),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  wire [16-1:0] M_comparator_op;
  reg [6-1:0] M_comparator_alufn;
  reg [16-1:0] M_comparator_a;
  reg [16-1:0] M_comparator_b;
  comparator_11 comparator (
    .alufn(M_comparator_alufn),
    .a(M_comparator_a),
    .b(M_comparator_b),
    .op(M_comparator_op)
  );
  
  wire [16-1:0] M_boolean_op;
  reg [6-1:0] M_boolean_alufn;
  reg [16-1:0] M_boolean_a;
  reg [16-1:0] M_boolean_b;
  boolean_12 boolean (
    .alufn(M_boolean_alufn),
    .a(M_boolean_a),
    .b(M_boolean_b),
    .op(M_boolean_op)
  );
  
  wire [16-1:0] M_shifter_op;
  reg [6-1:0] M_shifter_alufn;
  reg [16-1:0] M_shifter_a;
  reg [16-1:0] M_shifter_b;
  shifter_13 shifter (
    .alufn(M_shifter_alufn),
    .a(M_shifter_a),
    .b(M_shifter_b),
    .op(M_shifter_op)
  );
  
  always @* begin
    M_adder_alufn = alufn[0+5-:6];
    M_adder_a = a[0+15-:16];
    M_adder_b = b[0+15-:16];
    M_comparator_alufn = alufn[0+5-:6];
    M_comparator_a = a[0+15-:16];
    M_comparator_b = b[0+15-:16];
    M_boolean_alufn = alufn[0+5-:6];
    M_boolean_a = a[0+15-:16];
    M_boolean_b = b[0+15-:16];
    M_shifter_alufn = alufn[0+5-:6];
    M_shifter_a = a;
    M_shifter_b = b;
    
    case (alufn[4+1-:2])
      2'h0: begin
        alu = M_adder_op;
      end
      2'h1: begin
        alu = M_boolean_op;
      end
      2'h2: begin
        alu = M_shifter_op;
      end
      2'h3: begin
        alu = M_comparator_op;
      end
      default: begin
        alu = M_adder_op;
      end
    endcase
    z = M_adder_z;
    v = M_adder_v;
    n = M_adder_n;
  end
endmodule
