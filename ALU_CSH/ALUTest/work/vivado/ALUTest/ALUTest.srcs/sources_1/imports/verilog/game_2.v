/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_2 (
    input clk,
    input rst,
    input button,
    input start,
    output reg [15:0] red,
    output reg [15:0] green,
    output reg [15:0] blue,
    output reg [7:0] score
  );
  
  
  
  reg [15:0] M_redpos_d, M_redpos_q = 1'h0;
  reg [15:0] M_greenpos_d, M_greenpos_q = 1'h0;
  reg [15:0] M_bluepos_d, M_bluepos_q = 1'h0;
  reg [3:0] M_blueposindex_d, M_blueposindex_q = 1'h0;
  reg [7:0] M_scoremem_d, M_scoremem_q = 1'h0;
  reg M_button_dpress_d, M_button_dpress_q = 1'h0;
  reg M_button_start_d, M_button_start_q = 1'h0;
  reg [47:0] M_count_d, M_count_q = 1'h0;
  reg M_direction_d, M_direction_q = 1'h0;
  reg [31:0] M_speed_d, M_speed_q = 1'h0;
  reg M_godmode_d, M_godmode_q = 1'h0;
  wire [16-1:0] M_random_position_red;
  wire [16-1:0] M_random_position_green;
  reg [4-1:0] M_random_position_blueposindex;
  random_position_4 random_position (
    .clk(clk),
    .rst(rst),
    .blueposindex(M_random_position_blueposindex),
    .red(M_random_position_red),
    .green(M_random_position_green)
  );
  wire [1-1:0] M_dpress_condi_out;
  reg [1-1:0] M_dpress_condi_in;
  button_conditioner_5 dpress_condi (
    .clk(clk),
    .in(M_dpress_condi_in),
    .out(M_dpress_condi_out)
  );
  wire [1-1:0] M_dpress_debounce_out;
  reg [1-1:0] M_dpress_debounce_in;
  button_debounce_6 dpress_debounce (
    .clk(clk),
    .in(M_dpress_debounce_in),
    .out(M_dpress_debounce_out)
  );
  wire [1-1:0] M_start_condi_out;
  reg [1-1:0] M_start_condi_in;
  button_conditioner_5 start_condi (
    .clk(clk),
    .in(M_start_condi_in),
    .out(M_start_condi_out)
  );
  wire [1-1:0] M_start_debounce_out;
  reg [1-1:0] M_start_debounce_in;
  button_debounce_6 start_debounce (
    .clk(clk),
    .in(M_start_debounce_in),
    .out(M_start_debounce_out)
  );
  localparam INIT_gamestate = 3'd0;
  localparam CSHL_gamestate = 3'd1;
  localparam CSHR_gamestate = 3'd2;
  localparam COLLISION_gamestate = 3'd3;
  localparam SCORING_gamestate = 3'd4;
  localparam DONE_gamestate = 3'd5;
  
  reg [2:0] M_gamestate_d, M_gamestate_q = INIT_gamestate;
  
  wire [16-1:0] M_alu_alu;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  alu_7 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .alu(M_alu_alu),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  always @* begin
    M_gamestate_d = M_gamestate_q;
    M_button_start_d = M_button_start_q;
    M_scoremem_d = M_scoremem_q;
    M_bluepos_d = M_bluepos_q;
    M_redpos_d = M_redpos_q;
    M_blueposindex_d = M_blueposindex_q;
    M_count_d = M_count_q;
    M_greenpos_d = M_greenpos_q;
    M_button_dpress_d = M_button_dpress_q;
    M_speed_d = M_speed_q;
    M_godmode_d = M_godmode_q;
    M_direction_d = M_direction_q;
    
    M_alu_a = 1'h0;
    M_alu_b = 1'h0;
    M_alu_alufn = 1'h0;
    blue = M_bluepos_q;
    green = M_greenpos_q;
    red = M_redpos_q;
    score = M_scoremem_q;
    M_random_position_blueposindex = M_blueposindex_q;
    M_dpress_condi_in = button;
    M_dpress_debounce_in = M_dpress_condi_out;
    if (M_dpress_debounce_out == 1'h1) begin
      M_button_dpress_d = 1'h1;
    end
    M_start_condi_in = start;
    M_start_debounce_in = M_start_condi_out;
    if (M_start_debounce_out == 1'h1) begin
      M_button_start_d = 1'h1;
    end
    if (M_gamestate_q != INIT_gamestate) begin
      if (M_greenpos_q == M_bluepos_q) begin
        M_gamestate_d = SCORING_gamestate;
      end
      if (M_redpos_q == M_bluepos_q && M_godmode_q == 1'h0) begin
        M_gamestate_d = INIT_gamestate;
      end
      if (M_redpos_q == M_greenpos_q) begin
        M_redpos_d = M_redpos_q >> 1'h1;
      end
      if (M_redpos_q[0+15-:16] == 16'h0000) begin
        M_redpos_d = 16'h8000;
      end
    end
    
    case (M_gamestate_q)
      INIT_gamestate: begin
        M_redpos_d = 16'h0008;
        M_greenpos_d = 16'h0800;
        M_bluepos_d = 16'h0080;
        M_blueposindex_d = 3'h7;
        M_godmode_d = 1'h0;
        if (M_button_dpress_q == 1'h1 && M_button_start_q == 1'h1) begin
          M_button_dpress_d = 1'h0;
          M_button_start_d = 1'h0;
          M_godmode_d = 1'h1;
        end
        if (M_button_start_q == 1'h1) begin
          M_speed_d = 1'h0;
          M_scoremem_d = 1'h0;
          M_gamestate_d = CSHL_gamestate;
          M_button_start_d = 1'h0;
        end
      end
      CSHL_gamestate: begin
        M_count_d = M_count_q + 4'h8 + M_speed_q;
        M_direction_d = 1'h0;
        if (M_count_q[29+0-:1] == 1'h1) begin
          M_bluepos_d[0+15-:16] = M_bluepos_q << 1'h1;
          M_blueposindex_d = M_blueposindex_q + 1'h1;
          M_count_d = 1'h0;
        end
        if (M_bluepos_q[0+15-:16] == 16'h0000) begin
          M_bluepos_d = 1'h1;
          M_blueposindex_d = 1'h0;
        end
        if (M_button_dpress_q == 1'h1) begin
          M_button_dpress_d = 1'h0;
          M_gamestate_d = CSHR_gamestate;
        end
        if (M_button_start_q == 1'h1) begin
          M_button_start_d = 1'h0;
          M_gamestate_d = INIT_gamestate;
        end
      end
      CSHR_gamestate: begin
        M_count_d = M_count_q + 4'h8 + M_speed_q;
        M_direction_d = 1'h1;
        if (M_count_q[29+0-:1] == 1'h1) begin
          M_bluepos_d[0+15-:16] = M_bluepos_q >> 1'h1;
          M_blueposindex_d = M_blueposindex_q - 1'h1;
          M_count_d = 1'h0;
        end
        if (M_bluepos_q[0+15-:16] == 16'h0000) begin
          M_bluepos_d = 16'h8000;
          M_blueposindex_d = 4'hf;
        end
        if (M_button_dpress_q == 1'h1) begin
          M_button_dpress_d = 1'h0;
          M_gamestate_d = CSHL_gamestate;
        end
        if (M_button_start_q == 1'h1) begin
          M_button_start_d = 1'h0;
          M_gamestate_d = INIT_gamestate;
        end
      end
      SCORING_gamestate: begin
        M_random_position_blueposindex = M_blueposindex_q;
        M_greenpos_d = M_random_position_green;
        M_redpos_d = M_random_position_red;
        if (((M_scoremem_q / 2'h2) * 2'h2) == M_scoremem_q) begin
          M_speed_d = M_speed_q + 3'h4;
        end
        M_scoremem_d = M_scoremem_q + 1'h1;
        if (M_direction_q == 1'h0) begin
          M_gamestate_d = CSHL_gamestate;
        end
        if (M_direction_q == 1'h1) begin
          M_gamestate_d = CSHR_gamestate;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_redpos_q <= M_redpos_d;
    M_greenpos_q <= M_greenpos_d;
    M_bluepos_q <= M_bluepos_d;
    M_blueposindex_q <= M_blueposindex_d;
    M_scoremem_q <= M_scoremem_d;
    M_button_dpress_q <= M_button_dpress_d;
    M_button_start_q <= M_button_start_d;
    M_count_q <= M_count_d;
    M_direction_q <= M_direction_d;
    M_speed_q <= M_speed_d;
    M_godmode_q <= M_godmode_d;
    M_gamestate_q <= M_gamestate_d;
  end
  
endmodule
