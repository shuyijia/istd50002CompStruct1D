module random_position (
    input clk,  // clock
    input rst,  // reset
    input blueposindex[4],
    output red[16],
    output green[16]
  ) {
  
  .clk(clk){
  
    // define dffs needed
    dff redpos[16];
    dff greenpos[16];
    dff rednum[4];
    dff greennum[4];
    
    .rst(rst){
      pn_gen random;
    }
  }  
  
  alu alumod0;
  alu alumod1;
  alu aluadd0;
  alu aluadd1;
  alu aluadd2;
  alu aluadd3;

  always {    
  
    // initialize random
    random.seed = 32h0000000F;
    random.next = 1;
    
    // reset dff
    greenpos.d = 16b0;
    redpos.d = 16b0;
    
    // randomize red and green positions
    
    // blueposindex + 2
    aluadd0.a = blueposindex;
    aluadd0.b = 2;
    aluadd0.alufn = 6b0;
    
    // blueposindex + 4
    aluadd1.a = blueposindex;
    aluadd1.b = 4;
    aluadd1.alufn = 6b0;
    
    // random.num[2:0] + blueposindex + 2
    aluadd2.a = random.num[2:0];
    aluadd2.b = aluadd0.alu;
    aluadd2.alufn = 6b0;
    
    // random.num[5:3] + blueposindex + 4
    aluadd3.a = random.num[5:3];
    aluadd3.b = aluadd1.alu;
    aluadd3.alufn = 6b0;
    
    // set greennum and rednum
    greennum.d = aluadd2.alu[3:0];
    rednum.d = aluadd3.alu[3:0];
    
    alumod0.a = greennum.q;
    alumod0.b = 16;
    alumod0.alufn = 6b100;
    greenpos.d[alumod0.alu] = 1;
    
    alumod1.a = rednum.q;
    alumod1.b = 16;
    alumod1.alufn = 6b100;
    redpos.d[alumod1.alu] = 1;
    
    // outputs
    red = redpos.q;
    green = greenpos.q;

  }
}