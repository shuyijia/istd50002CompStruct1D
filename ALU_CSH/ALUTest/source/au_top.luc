module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input button,    
    input start,
    output red[16],   // LEDs on IO Shield
    output blue[16],
    output green[16],
    //output io_led[3][8],
    output seg[2][8],
    input usb_rx,           // USB->Serial input
    output usb_tx           // USB->Serial output
  ) {
  
  // IMPORTS
  sig rst;                  // reset signal
   
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {
      //blinker myBlinker;    // Blink led[8] if the current state is INIT
      //manual manual;        // Manual Testing
      //auto auto;            // Auto Testing
      game game;
      
    }
    
  }
  
  seven_seg seven_seg0;
  seven_seg seven_seg1;
  
   
  always { 
    reset_cond.in = ~rst_n;    // input raw inverted reset signal
    rst = reset_cond.out;      // conditioned reset
 
    //led = 8x{myBlinker.blink}; // blink LEDs
    led = 8h00;
    usb_tx = usb_rx;           // echo the serial data
    
    game.button = button;
    game.start = start;
    
    red = game.red;
    blue = game.blue;
    green = game.green;
    
    //seg = 2x{{8b1111111}};
    seven_seg0.char = (game.score) - ((game.score) / 10) * 10;
    seven_seg1.char = (game.score)/10;
    seg[0] = seven_seg0.seg;
    seg[1] = seven_seg1.seg;
  }
}