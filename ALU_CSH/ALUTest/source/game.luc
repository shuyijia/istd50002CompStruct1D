module game (
    input clk,  // clock
    input rst,  // reset
    input button, 
    input start,
    input godbtn,
    output red[16],
    output green[16],
    output blue[16],
    output score[8]
  ) {
  
    .clk(clk){
  
    // define dffs needed
    dff redpos[16];
    dff greenpos[16];
    dff bluepos[16];
    dff blueposindex[4];
    dff scoremem[8];
    dff button_dpress;
    dff button_start;
    dff button_god;
    dff count[48];
    dff direction;
    dff speed[32];
    dff godmode;
    
    .rst(rst){ 
      // use to generate random positions for red and green pixels
      random_position random_position;
    }
    
    // initialize direction button (big blue button)
    button_conditioner dpress_condi;
    button_debounce dpress_debounce;
    
    // initialize start button (small green button)
    button_conditioner start_condi;
    button_debounce start_debounce;
    
    // initialized godmode button (hidden)
    button_conditioner god_condi;
    button_debounce god_debounce;
    
    fsm gamestate = {INIT, CSHL, CSHR, COLLISION, SCORING, DONE};  

  }
  
  alu alu;

  always {
  
    // initialize alu
    alu.a = 0;
    alu.b = 0;
    alu.alufn = 0;
    
    // outputs
    blue = bluepos.q;
    green = greenpos.q;
    red = redpos.q;
    score = scoremem.q;
    random_position.blueposindex = blueposindex.q;
        
    // dpress button
    dpress_condi.in = button;
    dpress_debounce.in = dpress_condi.out;
    
    if (dpress_debounce.out == 1) {
      button_dpress.d = 1;
    }
        
    // start button
    start_condi.in = start;
    start_debounce.in = start_condi.out;
   
    if (start_debounce.out == 1) {
      button_start.d = 1;
    }
    
    // godmode button
    god_condi.in = godbtn;
    god_debounce.in = god_condi.out;
   
    if (god_debounce.out == 1) {
      button_god.d = 1;
    }
    
    // change state to SCORING if green and blue are in the same position
    if (gamestate.q != gamestate.INIT) {
      if (greenpos.q == bluepos.q) {
        gamestate.d = gamestate.SCORING;  
      }
      // change state to INIT if red and blue are in the same position
      if (redpos.q == bluepos.q && godmode.q == 0) {
        gamestate.d = gamestate.INIT;
      }
      
      // RED GREEN COLLISION
      if (redpos.q == greenpos.q) {
          redpos.d = redpos.q >> 1;
      }
        
      if (redpos.q[15:0] == 16b0) {
        redpos.d = 16h8000;
      }
    }
    
    case(gamestate.q){
      
      // INITIAL STATE
      gamestate.INIT:         
        redpos.d = 16h0008;
        greenpos.d = 16h0800;
        bluepos.d = 16h0080; 
        blueposindex.d = 7;
        
        // activate god mode
        if (button_god.q == 1) {
          button_god.d = 0;
          godmode.d = 1;
        }
        
        if (button_start.q == 1) { // Change the button to start
          speed.d = 0;
          scoremem.d = 0;
          gamestate.d = gamestate.CSHL;
          button_start.d = 0;
        }     
      
      // CIRCULAR SHIFT LEFT
      gamestate.CSHL:         
        count.d = count.q + 8 + speed.q;
        direction.d = 0;     
        
        if (count.q[29] == 1){
          // shift left
          alu.a = bluepos.q;
          alu.b = 16b1;
          alu.alufn = 100000;
          bluepos.d = alu.alu;
          
          blueposindex.d = blueposindex.q + 1;
          count.d = 0;
        }
          
        // CSHL BLUE (SPECIAL)
        if (bluepos.q[15:0] == 16b0) {
          bluepos.d = 1;
          blueposindex.d = 0;
        }
        
        // change state to CSHR if direction button is pressed
        if (button_dpress.q == 1){
          button_dpress.d = 0;
          gamestate.d = gamestate.CSHR;
        }
        // change state to INIT if start button is pressed
        if (button_start.q == 1) {
          button_start.d = 0;
          // Deactivate godmode on end
          godmode.d = 0;
          gamestate.d = gamestate.INIT;
        } 
              
      // CIRCULAR SHIFT RIGHT
      gamestate.CSHR:
        count.d = count.q + 8 + speed.q;
        direction.d = 1;

        if (count.q[29] == 1){
          // shift right
          alu.a = bluepos.q;
          alu.b = 16b1;
          alu.alufn = 100001;
          bluepos.d = alu.alu;
          
          blueposindex.d = blueposindex.q - 1;
          count.d = 0;
        }
          
        // CSHR BLUE (SPECIAL)
        if (bluepos.q[15:0] == 16b0) {
          bluepos.d = 16h8000;
          blueposindex.d = 15;
        }
        // change to CSHL if direction button is pressed
        if (button_dpress.q == 1){
          button_dpress.d = 0;
          gamestate.d = gamestate.CSHL;
        }
        
        // change state to INIT if start button is pressed
        if (button_start.q == 1) {
          button_start.d = 0;
          // Deactivate godmode on end
          godmode.d = 0;
          gamestate.d = gamestate.INIT;
        }     
        
      // SCORING STATE 
      gamestate.SCORING:                    
        random_position.blueposindex = blueposindex.q;
        
        // need to update both red and green position
        greenpos.d = random_position.green;
        redpos.d = random_position.red;
        
        // Increase speed
        if (((scoremem.q / 2) * 2) == scoremem.q) {
          speed.d = speed.q + 4;
        }
        
        // Increment score
        scoremem.d = scoremem.q + 1;
        
        if (direction.q == 0) {
          gamestate.d = gamestate.CSHL;
        }
        
        if (direction.q == 1) {
          gamestate.d = gamestate.CSHR;
        }
        
  }
}
