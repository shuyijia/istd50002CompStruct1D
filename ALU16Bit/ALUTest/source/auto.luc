module auto (
    input clk,  // clock
    input rst,  // reset
    output result [16],     // Result display
    output ledarray1 [8],   // Assigned 8 LED states used to indicate current state/operation
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  /* The different test signals:
  
    1.1  A = 0000000000000111 ,B = 0000000000000001, ALUFN = 000000, Function: ADD, Expected Outcome: 0000000000001000. -> Correct
    1.2  A = 0000000000001000, B = 0000000000000001, ALUFN = 000000, Function: ADD, Expected Outcome: 0000000000001000. -> Gives error
    
    2.1  A = 0000000000000111 ,B = 0000000000000001, ALUFN = 000001, Function: SUB, Expected Outcome: 000000000000110. -> Correct
    2.2  A = 0000000000001000, B = 0000000000000001, ALUFN = 000001, Function: ADD, Expected Outcome: 000000000000110. -> Gives error
    
    3.1  A = 0000000000000111 ,B = 0000000000000010, ALUFN = 000010, Function: MUL, Expected Outcome: 0000000000010000 -> Correct
    3.2  A = 0000000000001000, B = 0000000000000010, ALUFN = 000010, Function: MUL, Expected Outcome: 0000000000010000. -> Gives error
    
    4.1  A = 0000000000001100 ,B = 0000000000000011, ALUFN = 0000011, Function: DIV, Expected Outcome: 0000000000001000. -> Correct
    4.2  A = 0000000000001000, B = 0000000000000100, ALUFN = 0000011, Function: DIV, Expected Outcome: 0000000000001000. -> Gives error
  
    5.1  A = 0000000000000101 ,B = 0000000000001111, ALUFN = 011000, Function: AND, Expected Outcome: 0000000000000101. -> Correct
    5.2  A = 0000000000000110, B = 0000000000001111, ALUFN = 011000, Function: AND, Expected Outcome: 0000000000000101. -> Gives error
    
    6.1  A = 0000000000000101 ,B = 0000000000001010, ALUFN = 011110, Function: OR, Expected Outcome: 0000000000001111. -> Correct
    6.2  A = 0000000000000110, B = 0000000000001010, ALUFN = 011110, Function: OR, Expected Outcome: 0000000000001111. -> Gives error
    
    7.1  A = 0000000000000101 ,B = 0000000000001111, ALUFN = 010110, Function: XOR, Expected Outcome: 0000000000001110. -> Correct
    7.2  A = 0000000000000110, B = 0000000000001111, ALUFN = 010110, Function: XOR, Expected Outcome: 0000000000001110. -> Gives error

    8.1  A = 0000000000000101 ,B = 0000000000001111, ALUFN = 011010, Function: A, Expected Outcome: 0000000000000101. -> Correct
    8.2  A = 0000000000001000, B = 0000000000001111, ALUFN = 010110, Function: A, Expected Outcome: 0000000000000101. -> Gives error
    
    9.1  A = 1111111111110000 ,B = 0000000000000001, ALUFN = 011111, Function: INVA, Expected Outcome: 0000000000001111. -> Correct
    9.2  A = 1111111111110001, B = 0000000000000001, ALUFN = 011111, Function: INVA, Expected Outcome: 0000000000001111. -> Gives error
    
    10.1  A = 0000000000001111 ,B = 0000000000000001, ALUFN = 100000, Function: SHL, Expected Outcome: 0000000000011110. -> Correct
    10.2  A = 0000000000010000, B = 0000000000000001, ALUFN = 100000, Function: SHL, Expected Outcome:0000000000011110. -> Gives error
    
    11.1  A = 1110000000000000 ,B = 0000000000001000, ALUFN = 100001, Function: SHR, Expected Outcome: 000000001110000. -> Correct
    11.2  A = 1110000000000000, B = 0000000000001001, ALUFN = 100001, Function: SHR, Expected Outcome:000000001110000. -> Gives error
    
    12.1  A = 1110000000000000 ,B = 0000000000001000, ALUFN = 100011, Function: SRA, Expected Outcome: 11111111110000. -> Correct
    12.2  A = 1110000000000000, B = 0000000000001001, ALUFN = 100011, Function: SRA, Expected Outcome:11111111110000. -> Gives error
    
    13.1  A = 0000000000001101 ,B = 0000000000001101, ALUFN = 110001, Function: CMPEQ, Expected Outcome: 0000000000000001. -> Correct
    13.2  A = 0000000000001110, B = 0000000000001101, ALUFN = 110001, Function: CMPEQ, Expected Outcome: 0000000000000001. -> Gives error
    
    14.1  A = 0000000000000110 ,B = 0000000000000111, ALUFN = 110010, Function: CMPLT, Expected Outcome: 0000000000000001. -> Correct
    14.2  A = 0000000000000111, B = 0000000000000111, ALUFN = 110010, Function: CMPLT, Expected Outcome: 0000000000000001. -> Gives error
    
    15.1  A = 0000000000000111 ,B = 0000000000000111, ALUFN = 110011, Function: CMPLE, Expected Outcome: 0000000000000001. -> Correct
    15.2  A = 0000000000001000, B = 0000000000000111, ALUFN = 110011, Function: CMPLE, Expected Outcome: 0000000000000001. -> Gives error
    
    */
    
    
    
  // IMPORTS
  alu alu;
  
  .clk(clk){
  .rst(rst) {
      dff count[32];  // dff counter used to intervalize output; Incremented at every cycle 
    }
  fsm teststate = {INIT, ADD, SUB, MUL, DIV, AND, OR, XOR, A, INVA, SHL, SHR, SRA, CMPEQ, CMPLT, CMPLE, END};  // All ALU function test states
  }

  always {
  
    // Iitialize outputs
    alu.a = 16b0;    
    alu.b = 16b0;    
    alu.alufn = 6b0; 
    ledarray1 = 8b0;
    result = 16b0;
    
    count.d = count.q + 1;

    case(teststate.q){
    
      // INIT Test Case
      teststate.INIT:
        ledarray1 = 8b11111111;
        
        // To start auto testing press button 1 
        if (io_button[0] == 1){
          count.d = 32b0;
          teststate.d = teststate.ADD;
        }
        // ADD Test Case
      teststate.ADD:
      // Specify A,B and ALUFN inputs
        ledarray1 = 8b1; 
        alu.alufn = 6b0;
        // Initially, io_dip[0][7] is set to 0, and all autmated test cases will evaluate to true.
        // After one cycle of auto testing, we have the option to flip io_dip[0][7] on.
        // If io_dip[0][7] is flipped on, then all our automated test cases should evaluate to false.
        alu.a = 16b111 + io_dip[0][7] ;
        alu.b = 16b1;
        
        // Display A
        if (count.q[28:27] == 2b00){
          result = 16b111 + io_dip[0][7];
        }
        // Display B
        if (count.q[28:27] == 2b01){
          result = 16b1;
        }
        // Display result
        if (count.q[28:27] == 2b10){
          result = alu.alu;
          // If result is correct, light up io_led[0][7]
          if (alu.alu == 16b1000) {
            ledarray1[7] = 1;
          }
        }
        // Change state to subraction
        if (count.q[28:27] == 2b11){
          count.d = 32b0;
          teststate.d = teststate.SUB;
        }
        
      // Subraction Test Case
      teststate.SUB:
        ledarray1 = 8b10;
        alu.alufn = 6b01;
        // 
        alu.a = 16b111 + io_dip[0][7];
        alu.b = 16b1;
        if (count.q[28:27] == 2b00){
          result = 16b111 + io_dip[0][7];
        }
        if (count.q[28:27] == 2b01){
          result = 16b1;
        }
        if (count.q[28:27] == 2b10){
          result = alu.alu;
          if (alu.alu == 16b110) {
            ledarray1[7] = 1;
          }
        }

        if (count.q[28:27] == 2b11){
          count.d = 32b0;
          teststate.d = teststate.MUL;
        }
        // Multiplication Test Case
      teststate.MUL:
        ledarray1 = 8b11;
        alu.alufn = 6b10;
        alu.a = 16b111 + io_dip[0][7];
        alu.b = 16b10;
        if (count.q[28:27] == 2b00){
          result = 16b111 + io_dip[0][7];
        }
        if (count.q[28:27] == 2b01){
          result = 16b10;
        }
        if (count.q[28:27] == 2b10){
          result = alu.alu;
          if (alu.alu == 16b1110) {
            ledarray1[7] = 1;
          }
        }

        if (count.q[28:27] == 2b11){
          count.d = 32b0;
          teststate.d = teststate.DIV;
        }
        // Division Test Case
      teststate.DIV:
        ledarray1 = 8b100;
        alu.alufn = 6b11;
        alu.a = 16b1100;
        alu.b = 16b11 + io_dip[0][7];
        if (count.q[28:27] == 2b00){
          result = 16b1100;
        }
        if (count.q[28:27] == 2b01){
          result = 16b11 + io_dip[0][7];
        }
        if (count.q[28:27] == 2b10){
          result = alu.alu;
          if (alu.alu == 16b100) {
            ledarray1[7] = 1;
          }
        }

        if (count.q[28:27] == 2b11){
          count.d = 32b0;
          teststate.d = teststate.AND;
        }
        // AND test case
      teststate.AND:
        ledarray1 = 8b101;
        alu.alufn = 6b011000;
        alu.a = 16b0101 + io_dip[0][7];
        alu.b = 16b1111;
        if (count.q[28:27] == 2b00){
          result = 16b0101 + io_dip[0][7];
        }
        if (count.q[28:27] == 2b01){
          result = 16b1111;
        }
        if (count.q[28:27] == 2b10){
          result = alu.alu;
          if (alu.alu == 16b0101) {
            ledarray1[7] = 1;
          }
        }

        if (count.q[28:27] == 2b11){
          count.d = 32b0;
          teststate.d = teststate.OR;
        }
        // OR test case
      teststate.OR:
        ledarray1 = 8b110;
        alu.alufn = 6b011110;
        alu.a = 16b0101 + io_dip[0][7];
        alu.b = 16b1010;
        if (count.q[28:27] == 2b00){
          result = 16b0101 + io_dip[0][7];
        }
        if (count.q[28:27] == 2b01){
          result = 16b1010;
        }
        if (count.q[28:27] == 2b10){
          result = alu.alu;
          if (alu.alu == 16b1111) {
            ledarray1[7] = 1;
          }
        }

        if (count.q[28:27] == 2b11){
          count.d = 32b0;
          teststate.d = teststate.XOR;
        }
        // XOR test case
      teststate.XOR:
        ledarray1 = 8b111;
        alu.alufn = 6b010110;
        alu.a = 16b0101 + io_dip[0][7];
        alu.b = 16b1111;
        if (count.q[28:27] == 2b00){
          result = 16b0101 + io_dip[0][7];
        }
        if (count.q[28:27] == 2b01){
          result = 16b1111;
        }
        if (count.q[28:27] == 2b10){
          result = alu.alu;
          if (alu.alu == 16b1010) {
            ledarray1[7] = 1;
          }
        }

        if (count.q[28:27] == 2b11){
          count.d = 32b0;
          teststate.d = teststate.A;
        }
        // 'A' test case
      teststate.A:
        ledarray1 = 8b1000;
        alu.alufn = 6b011010;
        alu.a = 16b0101 + io_dip[0][7];
        alu.b = 16b1111;
        if (count.q[28:27] == 2b00){
          result = 16b0101 + io_dip[0][7];
        }
        if (count.q[28:27] == 2b01){
          result = 16b1111;
        }
        if (count.q[28:27] == 2b10){
          result = alu.alu;
          if (alu.alu == 16b0101) {
            ledarray1[7] = 1;
          }
        }

        if (count.q[28:27] == 2b11){
          count.d = 32b0;
          teststate.d = teststate.INVA;
        }
        // Invert A test case
      teststate.INVA:
        ledarray1 = 8b1001;
        alu.alufn = 6b011111;
        alu.a = 16b1111111111110000 + io_dip[0][7];
        alu.b = 16b1;
        if (count.q[28:27] == 2b00){
          result = 16b1111111111110000 + io_dip[0][7];
        }
        if (count.q[28:27] == 2b01){
          result = 16b1;
        }
        if (count.q[28:27] == 2b10){
          result = alu.alu;
          if (alu.alu == 16b1111) {
            ledarray1[7] = 1;
          }
        }

        if (count.q[28:27] == 2b11){
          count.d = 32b0;
          teststate.d = teststate.SHL;
        }
      // Shift left test case
      teststate.SHL:
        ledarray1 = 8b1010;
        alu.alufn = 6b100000;
        alu.a = 16b1111 + io_dip[0][7];
        alu.b = 16b1;
        if (count.q[28:27] == 2b00){
          result = 16b1111 + io_dip[0][7];
        }
        if (count.q[28:27] == 2b01){
          result = 16b1;
        }
        if (count.q[28:27] == 2b10){
          result = alu.alu;
          if (alu.alu == 16b11110) {
            ledarray1[7] = 1;
          }
        }

        if (count.q[28:27] == 2b11){
          count.d = 32b0;
          teststate.d = teststate.SHR;
        }
        // Shift right test case
      teststate.SHR:
        ledarray1 = 8b1011;
        alu.alufn = 6b100001;
        alu.a = 16b1110000000000000;
        alu.b = 16b1000 + io_dip[0][7];
        if (count.q[28:27] == 2b00){
          result = 16b1110000000000000;
        }
        if (count.q[28:27] == 2b01){
          result = 16b1000 + io_dip[0][7];
        }
        if (count.q[28:27] == 2b10){
          result = alu.alu;
          if (alu.alu == 16b11100000) {
            ledarray1[7] = 1;
          }
        }

        if (count.q[28:27] == 2b11){
          count.d = 32b0;
          teststate.d = teststate.SRA;
        }
        // Signed shift right test case
      teststate.SRA:
        ledarray1 = 8b1100;
        alu.alufn = 6b100011;
        alu.a = 16b1110000000000000;
        alu.b = 16b1000 + io_dip[0][7];
        if (count.q[28:27] == 2b00){
          result = 16b1110000000000000;
        }
        if (count.q[28:27] == 2b01){
          result = 16b1000 + io_dip[0][7];
        }
        if (count.q[28:27] == 2b10){
          result = alu.alu;
          if (alu.alu == 16b1111111111100000) {
            ledarray1[7] = 1;
          }
        }

        if (count.q[28:27] == 2b11){
          count.d = 32b0;
          teststate.d = teststate.CMPEQ;
        }
        // Compare equal to test case
      teststate.CMPEQ:
        ledarray1 = 8b1101;
        alu.alufn = 6b110001;
        alu.a = 16b1101 + io_dip[0][7];
        alu.b = 16b1101;
        if (count.q[28:27] == 2b00){
          result = 16b1101 + io_dip[0][7];
        }
        if (count.q[28:27] == 2b01){
          result = 16b1101;
        }
        if (count.q[28:27] == 2b10){
          result = alu.alu;
          if (alu.alu == 16b1) {
            ledarray1[7] = 1;
          }
        }

        if (count.q[28:27] == 2b11){
          count.d = 32b0;
          teststate.d = teststate.CMPLT;
        }
        // Compare lesser than test case
      teststate.CMPLT:
        ledarray1 = 8b1110;
        alu.alufn = 6b110010;
        alu.a = 16b110 + io_dip[0][7];
        alu.b = 16b111;
        if (count.q[28:27] == 2b00){
          result = 16b110 + io_dip[0][7];
        }
        if (count.q[28:27] == 2b01){
          result = 16b111;
        }
        if (count.q[28:27] == 2b10){
          result = alu.alu;
          if (alu.alu == 16b1) {
            ledarray1[7] = 1;
          }
        }

        if (count.q[28:27] == 2b11){
          count.d = 32b0;
          teststate.d = teststate.CMPLE;
        }
        // Compare less than or equal to test case
      teststate.CMPLE:
        ledarray1 = 8b1111;
        alu.alufn = 6b110011;
        alu.a = 16b111 + io_dip[0][7];
        alu.b = 16b111;
        if (count.q[28:27] == 2b00){
          result = 16b111 + io_dip[0][7];
        }
        if (count.q[28:27] == 2b01){
          result = 16b111;
        }
        if (count.q[28:27] == 2b10){
          result = alu.alu;
          if (alu.alu == 16b1) {
            ledarray1[7] = 1;
          }
        }

        if (count.q[28:27] == 2b11){
          count.d = 32b0;
          teststate.d = teststate.INIT;
        }
    }    
  }
}
