module adder (         // This module is for adding/subtracting
  input alufn[6],      // 6bit ALUFN input signal
  input a[16],         // 16bit input signal a
  input b[16],         // 16bit input signal b
  output op[16],       // 16bit output signal op
  output z[1],         // 1bit output z
  output v[1],         // 1bit output v
  output n[1]          // 1bit output n
  ) {
  
  // (Reference)JSIM code (adder / subtractor): .subckt adder32 ALUFN[0] A[15:0] B[15:0] s[15:0] z v n    
  
  sig op_sig[16];     // 16bit output signal

  always {   
    case(alufn[1:0]){         // ALUFN 0000xx
      2b00:                  // ALUFN 000000 (addition)
        op_sig = $signed(a)+$signed(b);
        op = op_sig;
        z = ~|op_sig;
        v = (((a[15])&(b[15])&(~op_sig[15])) | ((~a[15])&(~b[15])&(op_sig[15])));
        n = op_sig[15];
    
      2b01:                  // ALUFN 000001 (subtraction)
        op_sig = $signed(a)-$signed(b);
        op = op_sig;
        z = ~|op_sig;
        v = (((a[15])&(b[15])&(~op_sig[15])) | ((~a[15])&(~b[15])&(op_sig[15])));
        n = op_sig[15];
        
      2b10: // ALUFN 000010 (multiplication)
        op_sig = $signed(a)*$signed(b);
        op = op_sig;
        z = ~|op_sig;
        v = (((a[15])&(b[15])&(~op_sig[15])) | ((~a[15])&(~b[15])&(op_sig[15])));
        n = op_sig[15];
        
      2b11: //ALUFN 000011 (division)
        op_sig = $signed(a)/$signed(b);
        op = op_sig;
        z = ~|op_sig;
        v = (((a[15])&(b[15])&(~op_sig[15])) | ((~a[15])&(~b[15])&(op_sig[15])));
        n = op_sig[15];
    
      default:              // When there is no input
        op_sig = $signed(a)+$signed(b);
        op = op_sig;
        z = ~|op_sig;
        v = (((a[15])&(b[15])&(~op_sig[15])) | ((~a[15])&(~b[15])&(op_sig[15])));
        n = op_sig[15];  
      }
    }
  }