module shifter (
    input alufn[6],    // 6bit ALUFN input signal
    input a[16],       // 16bit input signal a
    input b[16],       // 16bit input signal b
    output op[16]      // 16bit output signal op
  ) {
  
  // declare intermediate variables here
  sig quotient, remainder;  

  always {   // ALUFN 1000XX
    case(alufn[1:0]){
      2b00:            // ALUFN 00 (Circular Shift Left)
        //op = a << b[4:0]; 
        /*quotient = (a + 1) / 16;
        op = (a + 1) - quotient * 16;*/
        op = a;
        if (a == 16h8000) {
          op = 16h0001;
        }
        if (a != 16h8000) {
          op = a << 1;
        }
       
      2b01:            // ALUFN 01 (Circular Shift Right)
        //op = a >> b[4:0];
        /*quotient = (a - 1) / 16;
        op = (a - 1) - quotient * 16;*/
        op = a;
        if (a == 16h0001) {
          op = 16h8000;
        }
        if (a != 16h0001) {
          op = a >> 1;
        }
      
      2b11:            // ALUFN 11 (Shift Right Arithmetic)
        op = $signed(a) >>> b[4:0];
      
      
      default:         // When there is no input
        op = a;
  }
}
